class Highlight {
  
  constructor (input ) {
    this.input = $(input);

    this.input.on("keyup", ( e ) => {
      delay( function () {
       GeneDive.onHighlightKeyup(); 
      }, 300);
    });
  }
  /**
   @fn       Highlight.highlight
   @brief    Highlights interactions that match terms
   @details  Searches every interaction's context and the two DGRs for the term with Regex, and changes it's
   highlight variable to true if it's a match, and false if not. The minimum length is 2, so no one letter searches.

   @param    interactions The interactions from the GeneDive search
   @callergraph
   */
  highlight ( interactions ) {
    let term = this.input.val();

    if ( term.length < 2 ) {
      return interactions.map( ( i ) => { i.highlight = false; return i; });
    } else {
      return interactions.map( ( i ) => { i.highlight = new RegExp(term,"i").test(`${i.context} ${i.mention1} ${i.mention2}`); return i; });
    }
  }

  /**
   @fn       Highlight.exportHighlightState
   @brief    Saves the Highlight state
   @details
   */
  exportHighlightState() {
    let highlightData = this.input.val();
    return highlightData;
  }

  /**
   @fn       Highlight.importHighlightState
   @brief    Sets the Highlight state
   @details
   @param    highlightData The state of Highlight that was generated by Highlight.exportHighlightState
   */
  importHighlightState(highlightData) {
    this.input.val(highlightData);
  }

}
