
/**
 @class		SortingColumn
 @brief		Test to check if rows are filtered according to DGR. 
 @details
 @authors	Vaishali Bisht vbisht1@mail.sfsu.edu
 @ingroup	tests
*/

const Test    = require('./Test');
const Table   = require( '../ui-automation/view/Table' );
const mixwith = require( 'mixwith' );
const mix     = mixwith.mix;

class SortingColumn extends mix( Test ).with( Table ) {
	get name() { return 'SortingColumn'; }

	execute() {
		return new Promise( async ( resolve, reject ) => {
			let dgr   = 'SFTPA1'; // MW NEED TO PARAMETERIZE THIS LATER
			let order = 'SortDown'; // SortUp/SortDown; see https://mottie.github.io/tablesorter/docs/

			await this.login();
			await this.oneHop();
			await this.search( dgr );

			let headers = await this.page.$$eval( '.header', headers => headers.map( header => header.id ));
			let hasClass = async ( id, c ) => { return await this.page.evaluate(( id, c ) => { return $( `#${id}` ).hasClass( c ); }, id, c ); };
			let getField = async ( id )    => { return await this.page.evaluate(( id ) => { return $( `#${id}` ).text() }, id ); };
			for( let id of headers ) {
				// Click the header to get to the requested state
				for( let clicks = 0; clicks < 3 && ! hasClass( id, `header${order}`); clicks++ ) {
					this.click( `#${id}` );
				}
				if( ! hasClass( id, `header${order}` )) { reject( `Sorting Order ${order} for column ${id} not achieved after 3 clicks` ); }
				let summary = await this.table.summary();
				let field   = await getField( id );

				console.log( id, field );
			}
		});
	}
}


module.exports = SortingColumn;
