/**
 * @class       ControlClick
 * @brief       Mixin for user registration
 * @details
 * @authors     Mike Wong mikewong@sfsu.edu, Nayana Laxmeshwar nlaxmeshwar@mail.sfsu.edu
 * @ingroup     test
 */
const Test    = require('./Test');
const Table   = require( '../ui-automation/view/Table' );
const Graph   = require( '../ui-automation/view/Graph' );
const mixwith = require( 'mixwith' );
const mix     = mixwith.mix;


class ControlClick extends mix( Test ).with( Table, Graph ) {
	get name() { return "Control-Click Graph"; }

	execute() {
		return new Promise( async ( resolve, reject ) => {
			try {
				let dgr = 'PCAD'; // MW NEED TO PARAMETERIZE THIS LATER

				// ===== TEST THE MECHANICS OF SEARCHING
				await this.login();
				await this.oneHop();
				await this.search( dgr );

				let summary = await this.table.summary(); // Use summary; other tests cover detailed results correctness

				for( let i = 0; i < 10; i++ ) {
					let n = summary.length; 
					if( n == 0 ) { continue; } // No results at the requested confidence score cutoff? Skip.

					let prev = new RegExp( dgr );
					dgr = summary[n-1].DGR1.match( prev ) ? summary[n-1].DGR2 : summary[n-1].DGR1

					await this.graph.node( dgr ).click([ 'Control' ]);
					await this.pageToLoad();
					summary = await this.table.summary();

					let regex = new RegExp( dgr );
					let pass  = summary.every( row => row.DGR1.match( regex ) || row.DGR2.match( regex ));

					if( ! pass ) { reject( `Graph Node Control-Click on DGR "${dgr}" gives some results that do not contain ${dgr}` ); }
				}
				resolve( 'Control-clicking on graph results in correct search substitution' );

			} catch( e ) {
				reject( e );
			}
		});
	}
}
module.exports = ControlClick;
