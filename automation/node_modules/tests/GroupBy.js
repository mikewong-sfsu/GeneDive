
/**
 @class		GroupByDGRPair
 @brief		Test to check if rows are grouped according to DGR pair. 
 @details   To test , we go to second page of every row and check if the dgr pair is same as selected.
 @authors	Mike Wong mikewong@sfsu.edu, Vaishali Bisht vbisht1@mail.sfsu.edu
 @ingroup	tests
*/

const Test    = require( '../tests/Test' );
const Table   = require( '../ui-automation/view/Table' );
const GroupBy = require( '../ui-automation/GroupBy' );
const mixwith = require( 'mixwith' );
const mix     = mixwith.mix;

class GroupByDGRPair extends mix( Test ).with( Table, GroupBy ) {
    get name() { return 'Group By DGR Pair'; }

    execute() {

        return new Promise(async (resolve, reject) => {
			// Why the Set() class proposal doesn't have built-in basic set functions (equivalence, union, intersection, subtraction, etc.)
			Set.prototype.equals = ( other ) => { return this.size == other.size && [ ... this ].every( x => other.has( x )); };

            try {

        		let dgr = 'SP-A';
                await this.login();
				await this.oneHop();
                await this.search( dgr );

				await this.groupBy.dgrPair();
				let table = await this.table.details();


				let groupedByDGRPair = table.every(( group ) => {
					let dgrPair = new Set([ group.DGR1, group.DGR2 ]);
					return group.details.every(( row ) => { 
						thisPair = new  Set([ row.DGR1, row.DGR2 ]);
						return thisPair.equals( dgrPair );
					});
				});

				if( ! groupedByDGRPair ) { reject( 'One or more DGR Pair groupings are heterogenous (not grouped by pairs)' ); }

            }
            catch (e) {
                reject(e);
            }

        });
    }

}


module.exports = FilterTest_GroupByDGRPair;
