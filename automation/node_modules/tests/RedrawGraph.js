/**
 * @class   Redraw Graph
 * @brief   redraw graph functionality
 * @details
 * @authors Mike Wong mikewong@sfsu.edu, Nayana Laxmeshwar nlaxmeshwar@mail.sfsu.edu
 * @ingroup Graph
 */

const Test    = require( '../tests/Test' );
const Graph   = require( '../ui-automation/view/Graph' );
const mixwith = require( 'mixwith' );
const mix     = mixwith.mix;


class RedrawGraph extends mix( Test ).with( Graph ) {

	get name() { return "Redraw Graph"; }

	execute() {
		return new Promise( async ( resolve, reject ) => {
			try {
				let dgr = 'ABI-1';
				await this.login();
				await this.oneHop();
				await this.search( dgr );

				await this.click( 'button.reset-graph');
         var nodes = await this.graph.nodes();
         var pivot, pivotNode;
         for (let key in nodes) {
           if (key.search(DGR[0]) !== -1){
             pivot = nodes[key];
             pivotNode = key
           }
         }
         delete nodes[pivotNode];
         await this.checkNodeConsistency(nodes,pivot);
      //if successful
      resolve(this.createResponse(true," Redraw graph tested successfully ",0));
     }
     catch(e){
       reject(e);
     }
   })
 }

checkNodeConsistency(nodes,pivot){
  return new Promise(async(resolve,reject)=>{
    try{
      var maxDistance = 0,maxTheta = 0;
      var theta = [];//list of angles
      for (let key in nodes){
        var pos = nodes[key];
        //calculateDistance between nodes
        let distance = Math.floor(Math.sqrt(Math.pow(pos.y - pivot.y,2) + Math.pow(pos.x - pivot.x,2)));
        //calculate angle between two nodes
        let angle = Math.floor(Math.atan2(pos.y - pivot.y, pos.x - pivot.x) * 180 / Math.PI);
        if(angle < 0)
        angle += 360
        theta.push(angle);

        if(maxDistance == 0 && maxTheta == 0){
          maxDistance = distance;
          maxTheta = 360/(nodes.length-1);
        }
        else{
          if(Math.abs(distance  - maxDistance) > 5)
           reject("edges are inconsistent")
        }
      }
      //check the angle to be approximately equal
      theta.sort((a, b) => b - a);//sort in decending order
      let i = 1;
      while(i < theta.length){
        //toFixed(1) for values rounded to 1 decimal place
        //parseFloat as the value from toFixed() is string
        let diff = parseFloat(Math.abs(theta[i] - theta[i-1])/maxTheta).toFixed(1);
        if(diff > 1.1 || diff < 0.9)
           reject("angles are inconsistent")
        i++;
      }
      //nodes consistent
      resolve();
    }
    catch(e){
      reject(e);
    }
  })
}

}
module.exports = RedrawGraph ;
