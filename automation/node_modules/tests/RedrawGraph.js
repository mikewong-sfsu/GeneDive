/**
 * @class   Redraw Graph
 * @brief   redraw graph functionality
 * @details
 * @authors Mike Wong mikewong@sfsu.edu, Nayana Laxmeshwar nlaxmeshwar@mail.sfsu.edu
 * @ingroup Graph
 */

const Test    = require( '../tests/Test' );
const Graph   = require( '../ui-automation/view/Graph' );
const mixwith = require( 'mixwith' );
const mix     = mixwith.mix;


class RedrawGraph extends mix( Test ).with( Graph ) {

	get name() { return "Redraw Graph"; }

	execute() {
		return new Promise( async ( resolve, reject ) => {
			try {
				const math   = require( 'mathjs' );
				const stddev = math.std;

				// let dgr = 'ABI-1';
				let dgr = 'BRCA1';
				await this.login();
				await this.oneHop();
				await this.search( dgr );

				await this.click( 'button.reset-graph');
				let nodes       = await this.graph.nodes();
				let center      = nodes.find( x => x.match( new RegExp( dgr )));
				let others      = nodes.filter( x => x != center );
				let hub         = { name: center, pos: await this.nodePosition( center )};
				let spokes      = [];

				for( let other of others ) { spokes.push({ name: other, pos: await this.nodePosition( other )}); }

				let distance    = ( hub, spoke ) => Math.floor( Math.sqrt( Math.pow( spoke.pos.y - hub.pos.y, 2 ) + Math.pow( spoke.pos.x - hub.pos.x, 2 )));
				let angle       = ( hub, spoke ) => Math.floor( Math.atan2( spoke.pos.y - hub.pos.y, spoke.pos.x - hub.pos.x, 2 ) * 180 / Math.PI );

				let numerically = ( a, b ) => a - b;
				let distances   = spokes.map( spoke => distance( hub, spoke ));
				let angles      = spokes.map( spoke => angle( hub, spoke )).sort( numerically ).reduce(( result, angle, i, arr ) => { result.push( i == 0 ? (360 + angle - arr[ arr.length - 1 ]) : angle - arr[ i - 1 ]); return result; }, []);

				let deviation   = { distances: stddev( distances ), angles: stddev( angles )};
				let pass        = (deviation.distances < 1) && (deviation.angles < 2);

				if( ! pass ) { reject( `On graph re-rendering, distances vary by ${deviation.distances.toFixed( 2 )} and angles vary by ${deviation.angles.toFixed( 2 )}` ); }

				console.log( 'STD DEV DIST', stddev( distances ), 'STD DEV ANGL', stddev( angles ));

				// resolve(this.result( true," Redraw graph tested successfully" ));

			} catch( e ) {
				reject( e );
			}
		});
	}
}
module.exports = RedrawGraph ;
