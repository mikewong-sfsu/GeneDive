/**
 * @class   Redraw Graph
 * @brief   redraw graph functionality
 * @details
 * @authors Mike Wong mikewong@sfsu.edu, Nayana Laxmeshwar nlaxmeshwar@mail.sfsu.edu
 * @ingroup Graph
 */

const Test    = require( '../tests/Test' );
const Graph   = require( '../ui-automation/view/Graph' );
const mixwith = require( 'mixwith' );
const mix     = mixwith.mix;


class RedrawGraph extends mix( Test ).with( Graph ) {

	get name() { return "Redraw Graph"; }

	execute() {
		return new Promise( async ( resolve, reject ) => {
			try {
				const math   = require( 'mathjs' );
				const stddev = math.std;

				let dgr = 'ABI-1';
				await this.login();
				await this.oneHop();
				await this.search( dgr );

				await this.click( 'button.reset-graph');
				let regex     = new RegExp( dgr );
				let nodes     = await this.graph.nodes();
				let center    = nodes.find( x => x.match( regex ));
				let others    = nodes.filter( x => ! x.match( regex )); // MW May be overly aggressive
				let hub       = { name: center, pos: await this.nodePosition( center )};
				let spokes    = [];

				for( let other of others ) { spokes.push({ name: other, pos: await this.nodePosition( other )}); }

				console.log( 'HUB', hub, 'SPOKES', spokes );

				let distance  = ( hub, spoke ) => Math.floor( Math.sqrt( Math.pow( spoke.pos.y - hub.pos.y, 2 ) + Math.pow( spoke.pos.x - hub.pos.x, 2 )));
				let angle     = ( hub, spoke ) => Math.floor( Math.atan2( spoke.pos.y - hub.pos.y, spoke.pos.x - hub.pos.x, 2 ) * 180 / Math.PI );

				let distances = spokes.map( spoke => distance( hub, spoke ));
				let angles    = spokes.map( spoke => angle( hub, spoke ));

				console.log( 'STD DEV DIST', stddev( distances ), 'STD DEV ANGL', stddev( angles ));

				resolve(this.result( true," Redraw graph tested successfully" ));

			} catch( e ) {
				reject( e );
			}
		});
	}
}
module.exports = RedrawGraph ;
