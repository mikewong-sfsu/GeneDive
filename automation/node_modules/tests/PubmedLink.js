
/**
 * @class   PubmedLink
 * @brief   Test to check if Pubmed link is working and report errors. 
 * @details
 * @authors Mike Wong mikewong@sfsu.edu, Vaishali Bisht vbisht1@mail.sfsu.edu
 * @ingroup tests
*/

const Test    = require( '../tests/Test' );
const Table   = require( '../ui-automation/view/Table' );
const mixwith = require( 'mixwith' );
const mix     = mixwith.mix;

class PubmedLink extends mix( Test ).with( Table ) {
	get name() { return "PubmedLink"; }
	execute() {
		return new Promise(async (resolve, reject) => {
			try {
				let dgrs = [ 'SP-A', 'Tino' ];

				await this.login();
				await this.oneHop();
				await this.search( dgrs );

				let results = await this.table.summary();
				for( let group of results ) {
					await this.click( `#${group.selector}` );
					await this.pageToLoad();

					let urls = await this.page.$$eval( '.pubmedLink', links => links.map( a => $( a ).attr( 'href' )));

					for( let url of urls ) {
						let match = url.match( /pubmedID=(?<id>\d+)/ );
						let selector = `.pubmedLink[href="${url}"] .fa-link`;
						console.log( `Clicking "${selector}"` );
						await this.click( selector );
						console.log( `Clicked "${selector}"` );
						await this.pageToLoad();
						console.log( url, match.groups.id, selector );

						let   pmid  = new RegExp( match.groups.id );
						const pages = await this.browser.pages();
						let   page  = pages.find( page => page.url().match( /ncbi/ ));
						console.log( 'PAGES', pages.map( p => p.url() ));
						if( ! page ) { reject( 'Pubmed link did not resolve' ); }

						page.close();
					}

					await.this.click( '.go-back' );
				}

			} catch ( e ) {
				reject( e );
			}
		});
	}
}

module.exports = PubmedLink;
