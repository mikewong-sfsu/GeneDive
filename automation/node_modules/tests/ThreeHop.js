const Test    = require( '../tests/Test' );
const Table   = require( '../ui-automation/view/Table' );
const Graph   = require( '../ui-automation/view/Graph' );
const mixwith = require( 'mixwith' );
const mix     = mixwith.mix;

class ThreeHop extends Test{
	get name() { return "ThreeHop"; }

	execute(){
		const EVALUATE_SETS = "$('.search-item').length";
		return new Promise(async(resolve,reject)=>{
			try{
				let rejectReason = "";
				//navigate to search page
				await this.startAtSearchPage().catch((reason)=>{reject(reason)});
				//check the type of interactions
				for(let i in this.DGR){
					await this.searchDGRs([this.DGR[i]],"3hop").catch((reason)=>{reject(reason)});
				}
				//count the DGR
				let numberOfDGR = await this.page.evaluate(EVALUATE_SETS).catch((reason)=>{reject(reason)});
				if(numberOfDGR !== this.DGR.length){
					let reason = `Test Failed:expected ${this.DGR.length} DGR, ${numberOfDGR} found`;
					reject(this.createResponse(false,reason,this.priority));
				}
				//get table of contents
				let tableContents = await this.getTableContents().catch((reason)=>{reject(reason)});
				await this.checkNHop(this.DGR,tableContents,3).catch((reason)=>{reject(reason)});

				//test passed
				resolve( this.result( true, 'Tested 3-Hop successfully' ));

			} catch( e ) {
				reject( this.result( false, e ));
			}
		})
	}
}

module.exports = ThreeHop;
