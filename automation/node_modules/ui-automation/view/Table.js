/**
 * @class     Table
 * @brief     Results Table Viewer API
 * @details   Automates the MVC Table Viewer.
 * @authors   Mike Wong mikewong@sfsu.edu
 * @ingroup   MVC
 */


let Table = (superclass) => class extends superclass {

	constructor( page, browser, options ) { // Mixed constructors are amazing
		super( page, browser, options );
		this.table = {
			results: () => { return this.tableResults(); },
		}
	}

	/**
	* @return The results table as an array of objects
	**/
	async tableResults() {
		let summary = await this.page.evaluate( () => {
			window.parseTable = function () {
				let values   = [];
				let table    = $( '.table' )[ 0 ];
				let rows     = [ ... table.rows ];

				// Parse the header row
				let header   = rows.shift();
				let headers  = [ ... header.cells ];
				let dgr      = 0;
				let fields   = headers.map(( cell ) => { let text = cell.textContent; if( text === "DGR" ) { dgr++; return `${text}${dgr}`; } return text; });

				// Parse the data rows
				rows.forEach(( row ) => {
					let obj   = { selector: row.id };
					let cells = [ ... row.cells ];
					cells.forEach(( cell, c ) => {
						let field = fields[ c ];
						let nodes = [ ... cell.childNodes ];
						obj[ field ] = nodes.reduce(( text, node ) => { return (text += node.textContent); }, '' );
					});
					delete obj[ '' ]; // Expansion column (+), which has no header
					values.push( obj );
				});
				return values;
			}
			return parseTable();
		});

		for( let row of summary ) {
			await this.click( `#${row.selector}` );
			row.details = await this.page.evaluate(() => { return parseTable(); });
			await this.click( '.go-back' );
		}
		console.log( summary );
		return summary;
	}
}

module.exports = Table;
