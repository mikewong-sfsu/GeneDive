/**
 * @class     Highlight
 * @brief     Highlight management API
 * @details   Automates the highlight features
 * @authors   Mike Wong mikewong@sfsu.edu
 * @ingroup   MVC
 */

let Highlight = (superclass) => class extends superclass {

	// ============================================================
	constructor( page, browser, options ) {
	// ============================================================
		super( page, browser, options );
		this.table.hasNoHighlights = ()       => { return this.tableHasNoHighlights(); }
		this.table.checkHighlights = ( term ) => { return this.tableCheckHighlights( term ); }
		// MW TODO check highlights for graph
	}

	// ============================================================
	async highlight( term ) {
	// ============================================================
		await this.click( '.highlight-input' );
		return this.type( term );
	}

	// ============================================================
	async tableHasNoHighlights() {
	// ============================================================
		await this.table.details();
		let table  = await this.table.flatten();
		let pass   = table.every( row => ! row.highlighted );
		return pass;
	}

	// ============================================================
	async tableCheckHighlights( term ) {
	// ============================================================
		let regex = new RegExp( term );
		let partitionByHighlights = ( arr ) => { arr.reduce(( parts, g ) => { g.highlighted ? parts[ 0 ].push( g ) : parts[ 1 ].push( g ); return parts; }, [[],[]]); };

		// Partition the results by highlighted and non-highlighted
		let groups  = { hl: [], nonHl: [] };

		// Verify that the highlighted groups: 
		// (1) has at least one highlighted detail; 
		// (2) all highlighted details have the // term; and
		// (3) all non-highlighted details do not have the term
		groups.hl.forEach( group => {
			let details = { hl: [], nonHl: []};
			[ details.hl, details.nonHl ] = group.details.partitionByHighlight();

			if( details.hl.length == 0 ) { reject( `A highlighted group "${group.selector}" contains no highlighted details` )}
			let pass = 
				details.hl    .every( row =>   row.Excerpt.match( regex )) && 
				details.nonHl .every( row => ! row.Excerpt.match( regex ));
			if( ! pass ) { reject( `There exists detail(s) in group "${group.selector}" that are highlighted and missing the highlight term or vice-versa` ); }
		});

		groups.nonHl.forEach( group => {
			if( group[ 'Sample Excerpt' ].match( regex )) { reject( `Group "${group.selector}" sample excerpt contains "${term}" and is not highlighted` ); }
			let details = { hl: [], nonHl: []};
			[ details.hl, details.nonHl ] = group.details.partitionByHighlight();

			if( details.hl.length > 0 ) { reject( `A non-highlighted group "${group.selector}" contains highlighted details` ); }
			let pass = details.nonHl.every( row => ! row.Excerpt.match( regex ));
			if( ! pass ) { reject( `There are one or more non-highlighted details that contain the highlight term` ); }
		});

		return true;
	}
}

module.exports = Highlight;

