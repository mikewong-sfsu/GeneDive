/**
 *@class     UiRegistration
 *@brief     User Registration UI API
 *@details
 *@authors   Mike Wong mikewong@sfsu.edu, Nayana Laxmeshwar nlaxmeshwar@mail.sfsu.edu
 *@ingroup   Registartion mixin
 */

/**
 * General Email Regex: RFC 5322 Official Standard
 * http://emailregex.com/
**/
const email   = { regex: { rfc5322: /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/ }};
const util    = require( 'util' );
const exec    = util.promisify( require( 'child_process' ).exec );

let UiRegistration = (superclass) => class extends superclass {

	register( login, password ) {
		return new Promise(async (resolve, reject) => {
			if( ! login.match( email.regex.rfc5322 )) { reject( `RFC5322 non-compliant e-mail ${login}` ); }
			try {
				await this.pageToLoad();
				await this.click( '.register' );
				await this.pageToLoad();
				await this.click( 'button' );
				await this.pageToLoad();

				if( this.pageMatch( 'index.php' )) {
					reject( 'Was not redirected to login page' );
				} else {
					resolve();
				}
			} catch (e) {
				reject(e);
			}
		});
	}

	// The sqlite3 npm install often fails and is generally unreliable; simpler
	// to go straight to command line Since the test and automation systems are
	// designed to be run by trusted users already, there is no security risk.
	userdb( query, callback ) {
		return new Promise( async ( resolve, reject ) => {
			try {
				const db = '/usr/local/genedive/data/users.sqlite';
				const { stdout, stderr } = await exec( `sqlite3 ${db} '${query}' | wc -l` );
				let result = parseInt( stdout );
				if( typeof callback === 'function' ) { callback( result ); }
			} catch( e ) {
				reject( e );
			}
		});
	}
	
	unregister( login ) {
		return new Promise(( resolve, reject ) => {
			if( ! login.match( email.regex.rfc5322 )) { reject( `RFC5322 non-compliant e-mail: '${login}'` ); }

			const select       = `SELECT * FROM user WHERE email="${login}"`;
			const unregister   = `DELETE FROM user WHERE email="${login}"`;

			try {

				this.userdb( select, ( hasUser ) => { if( hasUser ) { reject( `Failed to unregister: User ${login} not registered` ); } else { resolve(); }});
				this.userdb( unregister );
				this.userdb( select, ( hasUser ) => { if( hasUser ) { reject( `Failed to unregister: User ${login} still registered.` ); } else { resolve(); }});

				resolve();
			} catch (e) {
				reject(e);
			}
		});
	}
}
module.exports = Registration;
