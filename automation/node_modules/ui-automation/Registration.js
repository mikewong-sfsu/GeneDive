/**
 *@class     Registration
 *@brief     User Registration UI API
 *@details   Automates the Registration UI. Requires options.url to start at
 *           the landing page (index.php), and options.register to have all
 *           relevant fields in the registration page.
 *@authors   Mike Wong mikewong@sfsu.edu, Nayana Laxmeshwar nlaxmeshwar@mail.sfsu.edu
 *@ingroup   Registration
 */

/**
 * General Email Regex: RFC 5322 Official Standard
 * http://emailregex.com/
**/
const email = { regex: { rfc5322: /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/ }};
const util  = require( 'util' );
const exec  = require( 'child_process' ).execSync;

let Registration = (superclass) => class extends superclass {

	register() {
		return new Promise( async (resolve, reject) => {
			let login = this.options.register.email;
			if( ! login.match( email.regex.rfc5322 )) { reject( `RFC5322 non-compliant e-mail ${login}` ); }
			try {
				await this.navigate( this.options.url );
				await this.click( '.register' );

				// Enter the required fields for registration
				let fields = this.options.register;
				for( const field of Object.keys( fields )) {
					let value = fields[ field ];
					await this.click( `#${field}` );
					await this.type( value );
				}

				await this.click( 'button[type="submit"]' );
				await this.pageToLoad();

				if( ! this.pageMatch( 'index.php' )) { reject( 'Was not redirected to login page' ); }
				resolve();
			} catch( e ) {
				reject( e );
			}
		});
	}

	// The sqlite3 npm install is currently generally unreliable; it is simpler
	// to go straight to command line. Since the test and automation systems are
	// designed to be run by trusted users already, there is no security risk.
	userdb( query ) {
		const db     = '/usr/local/genedive/data/users.sqlite';
		const stdout = exec( `docker exec genedive-local sqlite3 ${db} '${query}'` ); // MW Running from Docker Host
		// const stdout = exec( `sqlite3 ${db} '${query}' | tee /dev/stderr | wc -l` );
		return stdout.toString();
	}
	
	unregister( login ) {
		return new Promise( async ( resolve, reject ) => {
			if( ! login.match( email.regex.rfc5322 )) { reject( `RFC5322 non-compliant e-mail: '${login}'` ); }

			const select     = `SELECT email FROM user WHERE email="${login}"`;
			const unregister = `DELETE FROM user WHERE email="${login}"`;

			try {
				if( ! this.userdb( select ))     { reject( `Unregister failed: ${login} not registered.` ); }
				if(   this.userdb( unregister )) { reject( `Unregister failed: Can't delete ${login} from DB.` ); }
				if(   this.userdb( select ))     { reject( `Unregister failed: ${login} still registered.` ); }

				resolve();
			} catch (e) {
				reject( e );
			}
		});
	}
}
module.exports = Registration;
