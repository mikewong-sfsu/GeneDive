/**
 * @class     Filter
 * @brief     Filter management API
 * @details   Automates the filtering features
 * @authors   Mike Wong mikewong@sfsu.edu
 * @ingroup   MVC
 */

let Filter = (superclass) => class extends superclass {

	// ============================================================
	constructor( page, browser, options ) {
	// ============================================================
		super( page, browser, options );
		this.filter = {
			article: {
				is:      async ( option ) => { await this.filterIs();  return this.filterArticle( option ); },
				not:     async ( option ) => { await this.filterNot(); return this.filterArticle( option ); },
				options: async ()         => { return this.filterArticleOptions(); }
			},
			dgr: {
				is:      async ( option ) => { await this.filterIs();  return this.filterDGR( option ); },
				not:     async ( option ) => { await this.filterNot(); return this.filterDGR( option ); },
				options: async ()         => { return this.filterDGROptions(); }
			},
			excerpt: {
				is:      async ( option ) => { await this.filterIs();  return this.filterExcerpt( option ); },
				not:     async ( option ) => { await this.filterNot(); return this.filterExcerpt( option ); },
				options: async ()         => { return this.filterExcerptOptions(); }
			},
			journal: {
				is:      async ( option ) => { await this.filterIs();  return this.filterJournal( option ); },
				not:     async ( option ) => { await this.filterNot(); return this.filterJournal( option ); },
				options: async ()         => { return this.filterJournalOptions(); }
			},
		};
		this.filters = {
			applied: () => { return this.filtersApplied(); }
		};
	}

	// ============================================================
	async filterIs()  { await this.click( 'input[type="radio"][name="isnot"][value="is"]' );  }
	async filterNot() { await this.click( 'input[type="radio"][name="isnot"][value="not"]' ); }
	// ============================================================

	// ============================================================
	async filtersApplied() {
	// ============================================================
		return await this.page.$$eval( '.filters .filter-item', ( filters ) => { 
			return filters.map(( filter ) => {
				let id  = $( filter ).attr( 'id' );
				let att = $( filter ).children( '.attribute' ) .text();
				let is  = $( filter ).children( '.is' )        .text();
				let val = $( filter ).children( '.value' )     .text();
				return { id: id, attribute: att, is: is, value: val };
			})
		});
	}

	// ============================================================
	async filtersRemove( filter ) {
	// ============================================================
		let filters = this.filtersApplied();
		let filter  = 
	}

	// ============================================================
	async filterArticle( option ) {
	// ============================================================
		await this.page.select( '.filter-select', 'Article' );
		await this.page.waitForSelector( `.filter-dropdown option[value="${option}"]` );
		await this.page.select( '.filter-dropdown', option );
		return this.click( '.input-group-btn .btn' );
	}

	// ============================================================
	async filterArticleOptions() {
	// ============================================================
		await this.page.select( '.filter-select', 'Article' );
		return await this.page.evaluate(() => {
			return $( '.filter-dropdown option' ).map(( i, el ) => $( el ).val());
		});
	}



}

module.exports = Filter;

